<?php
/**
 * {{VENDOR_NAME}}
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade this module to newer
 * versions in the future. If you wish to customize this module for your
 * needs please contact {{VENDOR_NAME}} for more information.
 *
 * @package     m23-example-modules
 * @copyright   Copyright (c) {{YEAR}} {{VENDOR_NAME}}
 * @author      {{VENDOR_NAME}}
 *
 */

declare(strict_types=1);

namespace {{VENDOR_NAME}}\{{MODULE_NAME}}\Command\Module;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\Question;
use ProcessEight\ModuleManager\Model\ConfigKey;

class {{COMMAND_CLASS_NAME}} extends Command
{
    /**
     * @var \League\Pipeline\Pipeline
     */
    private $pipeline;

    /**
     * @var \ProcessEight\ModuleManager\Model\Stage\ValidateVendorName
     */
    private $validateVendorName;

    /**
     * @var \ProcessEight\ModuleManager\Model\Stage\ValidateModuleName
     */
    private $validateModuleName;

    /**
     * @var \ProcessEight\ModuleManager\Model\Stage\CreateModuleFolder
     */
    private $createModuleFolder;

    /**
     * @var \ProcessEight\ModuleManager\Model\Stage\CreateEtcFolder
     */
    private $createEtcFolder;

    /**
     * @var \ProcessEight\ModuleManager\Model\Stage\CreateModuleXmlFile
     */
    private $createModuleXmlFile;

    /**
     * @var \ProcessEight\ModuleManager\Model\Stage\CreateRegistrationPhpFile
     */
    private $createRegistrationPhpFile;

    /**
     * @var \ProcessEight\ModuleManager\Model\Stage\CreateComposerJsonFile
     */
    private $createComposerJsonFile;

    /**
     * Constructor.
     *
     * @param \League\Pipeline\Pipeline                                         $pipeline
     * @param \ProcessEight\ModuleManager\Model\Stage\ValidateVendorName        $validateVendorName
     * @param \ProcessEight\ModuleManager\Model\Stage\ValidateModuleName        $validateModuleName
     * @param \ProcessEight\ModuleManager\Model\Stage\CreateModuleFolder        $createModuleFolder
     * @param \ProcessEight\ModuleManager\Model\Stage\CreateEtcFolder           $createEtcFolder
     * @param \ProcessEight\ModuleManager\Model\Stage\CreateModuleXmlFile       $createModuleXmlFile
     * @param \ProcessEight\ModuleManager\Model\Stage\CreateRegistrationPhpFile $createRegistrationPhpFile
     * @param \ProcessEight\ModuleManager\Model\Stage\CreateComposerJsonFile    $createComposerJsonFile
     */
    public function __construct(
        \League\Pipeline\Pipeline $pipeline,
        \ProcessEight\ModuleManager\Model\Stage\ValidateVendorName $validateVendorName,
        \ProcessEight\ModuleManager\Model\Stage\ValidateModuleName $validateModuleName,
        \ProcessEight\ModuleManager\Model\Stage\CreateModuleFolder $createModuleFolder,
        \ProcessEight\ModuleManager\Model\Stage\CreateEtcFolder $createEtcFolder,
        \ProcessEight\ModuleManager\Model\Stage\CreateModuleXmlFile $createModuleXmlFile,
        \ProcessEight\ModuleManager\Model\Stage\CreateRegistrationPhpFile $createRegistrationPhpFile,
        \ProcessEight\ModuleManager\Model\Stage\CreateComposerJsonFile $createComposerJsonFile
    ) {
        parent::__construct();
        $this->pipeline                  = $pipeline;
        $this->validateVendorName        = $validateVendorName;
        $this->validateModuleName        = $validateModuleName;
        $this->createModuleFolder        = $createModuleFolder;
        $this->createEtcFolder           = $createEtcFolder;
        $this->createModuleXmlFile       = $createModuleXmlFile;
        $this->createRegistrationPhpFile = $createRegistrationPhpFile;
        $this->createComposerJsonFile    = $createComposerJsonFile;
    }

    /**
     * Configure
     */
    protected function configure()
    {
        $this->setName("{{COMMAND_NAME}}");
        $this->setDescription("{{COMMAND_DESCRIPTION}}");
        // Example of adding optional options
        $this->addOption('vendor-name', null, InputOption::VALUE_OPTIONAL, 'Vendor name');
        $this->addOption('module-name', null, InputOption::VALUE_OPTIONAL, 'Module name');
        parent::configure();
    }

    /**
     * @param InputInterface  $input
     * @param OutputInterface $output
     *
     * @return int|null
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        // Example of asking the user for input

        /** @var \Symfony\Component\Console\Helper\QuestionHelper $questionHelper */
        $questionHelper = $this->getHelper('question');

        if (!$input->getOption('vendor-name')) {
            $question = new Question('<question>Vendor name [ProcessEight]:</question> ', 'ProcessEight');

            $input->setOption(
                'vendor-name',
                $questionHelper->ask($input, $output, $question)
            );
        }

        if (!$input->getOption(ConfigKey::MODULE_NAME)) {
            $question = new Question('<question>Module name: [Test]</question> ', 'Test');

            $input->setOption(
                ConfigKey::MODULE_NAME,
                $questionHelper->ask($input, $output, $question)
            );
        }

        $output->writeln($input->getOption('vendor-name'));
        $output->writeln($input->getOption('module-name'));

        return null;
    }
}
